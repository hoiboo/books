<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh-CN">
<head>
  <meta charset="utf-8"/>
  <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  
    <title>第1版跋</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link rel="stylesheet" type="text/css" href="../../stylesheet.css"/>
<link rel="stylesheet" type="text/css" href="../../page_styles.css"/>

  

  <link href="../../calibreHtmlOutBasicCss.css" type="text/css" rel="stylesheet" />
</head>
<body>


<div class="calibreMain">
  <div class="calibreEbookContent">
    
<h1 class="firsttitle">
<a href="part0000.xhtml#toc134">第1版跋</a>
</h1>
<p class="content">[按]作者的自问自答在当年非常适合作为本书第1版的跋，如今这个问答依然适合本书新版的内容，所以将它保留了。</p>
<p class="content">问：谢谢你同意接受我的采访。</p>
<p class="content">答：不用客气，呵呵，我的时间不就是你的时间嘛。</p>
<p class="content">问：既然这些章节的内容在《ACM 通讯》中早就刊载过了，你为什么还要将它们整理成一本书呢？</p>
<p class="content">答：有几个小的原因：我修正了几十处错误，进行了几百处较小的改进，并增加了几个新的章节；书中的习题、答案和插图比原来多了50%；而且，将这些内容整理成一本书，也比散布在十几本杂志中更方便读者。不过，最大的原因是：将这些内容放到一起，才更容易看出贯穿各章的主题；整体大于局部之和。</p>
<p class="content">问：都有哪些主题？</p>
<p class="content">答：最重要的就是：对程序设计做深入思考，这既有用又有趣。程序设计不仅仅意味着根据正式的需求文档进行系统化的程序开发。即便只能够帮助一个灰心的程序员重新爱上他（她）的工作，这本书也算达到目的了。</p>
<p class="content">问：这个回答很模糊，有没有把各章联系在一起的技术线索？</p>
<p class="content">答：性能是第二部分的题目，也是贯穿所有章节的一个主题。程序验证在好几章中得到广泛使用。附录A对本书中的算法进行了分类。</p>
<p class="content">问：似乎多数章节都强调了设计过程，你能否总结一下自己在这方面的建议？答：我很高兴你问到这个问题。在回答你的问题之前，我碰巧准备了一个列表。下面就是对程序员的10条建议。</p>
<p class="content">解决正确的问题。</p>
<p class="content">探索所有可能的解决方案。</p>
<p class="content">观察数据。</p>
<p class="content">使用粗略估算。</p>
<p class="content">利用对称性。</p>
<p class="content">利用组件做设计。</p>
<p class="content">建立原型。</p>
<p class="content">必要时进行权衡。</p>
<p class="content">保持简单。</p>
<p class="content">追求优美。</p>
<p class="content">以上几点最初是针对编程提出的，但也适用于其他任何工程环境。</p>
<p class="content">问：这让我想起了一个一直困扰着我的问题：简化本书中的小程序很容易，但本书中的方法能放大到实际软件上起作用吗？</p>
<p class="content">答：我有三种答案：能、不能、可能。这些方法“能”被放大，例如，（第 1 版的）3.4 节描述了一个大型软件项目，这个项目经过简化后，“仅”需要 80 人年。同样有道理的答案是“不能”：如果简化得恰当，就可以避免建立庞大的系统，这些方法就没有必要被放大了。这两种观点都有道理，但实际情况往往介于两者之间，这就是为什么我说“可能”。有些软件必然很庞大，本书的主题比较适用于这些系统。Unix系统就是一个很好的例子，由多个简单优美的部分组成一个强大的整体。</p>
<p class="content">问：你在书中几乎都在讨论贝尔实验室，这会不会使书中内容有些局限性？</p>
<p class="content">答：可能有一点。我主要使用了自己看到的一些实际材料，这使得本书有些偏向于我的工作环境。更确切地说，这些章节中的很多材料是我的同事们贡献的，他们应该受到赞扬（或批评）。我从贝尔实验室的研究人员和开发人员那里学到了很多东西。贝尔实验室具有很好的合作氛围，能够促进研究和开发之间的交互。因此，很多你觉得比较局限的东西，实际上是我对公司的感情的表现。</p>
<p class="content">问：让我们回到原来的话题上吧，本书还缺少哪些内容？</p>
<p class="content">答：我曾想在本书中描述一个包含很多程序的大型系统，但是我无法在篇幅通常为 10 页左右的一章中描述一个有趣的系统。从更一般的角度上来说，我希望将来能够增加几章讨论“面向程序员的计算机科学”（类似于第4章的程序验证和第8章的算法设计）和“工程化的计算技术”（类似于第7章的粗略估算）。</p>
<p class="content">问：既然你这么注重“科学”和“工程”，那为什么本书的章节侧重的是故事情节而不是定理和表格呢？</p>
<p class="content">答：行啦，自问自答可不应该讨论写作风格。</p>



  </div>

  <div class="calibreEbNav">
    
      <a href="part0009.xhtml" class="calibreAPrev">上一页
</a>
    

    <a href="../../../kvhzrpvu.html" class="calibreAHome">目录
</a>

    
      <a href="part0011.xhtml" class="calibreANext">下一页
</a>
    
  </div>

</div>

</body>
</html>
